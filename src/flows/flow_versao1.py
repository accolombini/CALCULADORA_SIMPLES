
"""
    ||>Objetivo deste Flow
        |>Orquestrar a execu√ß√£o de uma calculadora simples com duas opera√ß√µes implementadas em modules/operacoes.py: adi√ß√£o e subtra√ß√£o.
        |>Este flow tamb√©m serve para validar toda a estrutura do reposit√≥rio e os benef√≠cios iniciais da orquestra√ß√£o com o Prefect.
    
        ||> Importante:
            |> Usamos @task para transformar executar_operacoes() em uma tarefa isolada e observ√°vel pelo Prefect.
            |> @flow encapsula a orquestra√ß√£o das tarefas, e poder√° ser versionado, agendado ou acionado via CI/CD.
            |> O bloco if __name__ == "__main__" permite testes locais sem necessidade de deploy.
            |> Integra-se diretamente ao Prefect via prefect.yaml.
"""

"""
flow_versao1.py ‚Äî Orquestra o primeiro fluxo da Calculadora Simples
Executa testes automatizados antes de executar opera√ß√µes
"""


import subprocess
from prefect import flow, task
from modules.operacoes import Calculadora


@task(name="Executar Testes Automatizados")
def executar_testes():
    """
    Executa os testes da pasta `tests/` usando o framework unittest.
    Se os testes falharem, o processo ser√° interrompido.
    """
    print("üîç Executando testes unit√°rios com unittest...")
    resultado = subprocess.run(
        ["python", "-m", "unittest", "discover", "tests"], capture_output=True, text=True)

    print("üìÑ Sa√≠da dos testes:\n", resultado.stdout)
    if resultado.returncode != 0:
        print("‚ùå Testes falharam:\n", resultado.stderr)
        raise Exception(
            "Os testes automatizados falharam. O fluxo foi interrompido.")
    print("‚úÖ Todos os testes passaram com sucesso.")


@task(name="Executar Opera√ß√µes da Calculadora")
def executar_operacoes(valor1: float, valor2: float) -> None:
    """
    Instancia a calculadora e executa as opera√ß√µes b√°sicas da vers√£o 1.
    """
    calc = Calculadora()
    print("Soma:", calc.somar(valor1, valor2))
    print("Subtra√ß√£o:", calc.subtrair(valor1, valor2))
    print("Multiplica√ß√£o:", calc.multiplicar(valor1, valor2))
    try:
        print("Divis√£o:", calc.dividir(valor1, valor2))
    except ValueError as e:
        print("Erro ao dividir:", str(e))
    print("Opera√ß√µes conclu√≠das.")


@flow(name="flow-versao1")
def flow_versao1():
    """
    Primeiro fluxo da calculadora orquestrada com Prefect.
    """
    valor1 = 10.0
    valor2 = 5.0

    executar_testes()  # Executa testes antes da opera√ß√£o
    executar_operacoes(valor1, valor2)


if __name__ == "__main__":
    flow_versao1()
