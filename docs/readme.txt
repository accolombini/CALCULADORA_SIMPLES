===============================================================
Projeto: CALCULADORA_SIMPLES
===============================================================

üîπ OBJETIVO
Desenvolver uma calculadora aritm√©tica modular e orientada a objetos (OO), com foco did√°tico, demonstrando:
- A import√¢ncia de boas pr√°ticas de Engenharia de Software.
- O uso da orquestra√ß√£o com Prefect para automa√ß√£o de deploys e versionamento.
- A escalabilidade de solu√ß√µes bem projetadas.

üîπ FUNCIONALIDADES DA VERS√ÉO INICIAL
- Opera√ß√£o de adi√ß√£o
- Opera√ß√£o de subtra√ß√£o

As funcionalidades ser√£o incrementadas gradualmente nas pr√≥ximas vers√µes:
- Multiplica√ß√£o
- Divis√£o
- Porcentagem

üîπ JUSTIFICATIVA
Este projeto ser√° utilizado como base did√°tica para demonstrar:
- Como estruturar um projeto profissional de software desde o in√≠cio.
- A import√¢ncia da modulariza√ß√£o e da documenta√ß√£o adequada.
- Como utilizar um orquestrador para realizar deploys autom√°ticos e controlados.
- A evolu√ß√£o de um sistema em ciclos incrementais com controle de vers√£o (Git + GitHub Actions + Prefect).

üîπ PREMISSAS DO PROJETO
- Todo o c√≥digo ser√° escrito em Python 3.12.5.
- O ambiente de desenvolvimento ser√° gerenciado por um ambiente virtual chamado `DEV`.
- O reposit√≥rio principal ser√° versionado no GitHub: `CALCULADORA_SIMPLES`.
- O Prefect Cloud ser√° utilizado para monitoramento e execu√ß√£o dos fluxos automatizados.

üîπ ORGANIZA√á√ÉO MODULAR
- Cada opera√ß√£o ser√° implementada em m√≥dulos separados dentro do diret√≥rio `modules/`.
- Os testes estar√£o no diret√≥rio `tests/`.
- A orquestra√ß√£o com o Prefect ser√° organizada em `flows/`.
- Arquivos de infraestrutura e integra√ß√£o cont√≠nua estar√£o em `infra/`.

üîπ PADR√ïES E BOAS PR√ÅTICAS
- Estrutura baseada em separa√ß√£o de responsabilidades (SRP - Single Responsibility Principle).
- Nomea√ß√£o clara e sem√¢ntica dos arquivos e fun√ß√µes.
- Uso de `README.md` para apresenta√ß√£o do reposit√≥rio e `readme.txt` para documenta√ß√£o funcional.
- Uso de versionamento sem√¢ntico nas tags e documenta√ß√£o de altera√ß√µes.

üîπ FORMA DE USO ESPERADA (vers√£o inicial)
- O sistema ser√° executado por linha de comando.
- O fluxo `hello_world` do Prefect ser√° usado para testar a orquestra√ß√£o.
- Comandos de execu√ß√£o e testes ser√£o documentados na pr√≥xima etapa (ETAPA 1).

üîπ CONTROLE DE VERS√ÉO E DEPLOY
- A cada nova funcionalidade adicionada, ser√° realizado:
  - Novo commit.
  - Novo push.
  - Novo deploy autom√°tico via GitHub Actions e Prefect Cloud.
- O pipeline de CI/CD ser√° mantido em `infra/`.

üîπ SOBRE TYPE HINTS
- S√£o anota√ß√µes de tipo (`int`, `float`, `str`, etc.) usadas para indicar o tipo esperado de argumentos e retornos.
- Facilitam a leitura, a manuten√ß√£o e a an√°lise por ferramentas como linters, editores (VSCode) e documenta√ß√£o automatizada.
- Exemplo:
  ```python
  def somar(self, a: float, b: float) -> float:
      return a + b

üîπ SOBRE __init__.py

Esse arquivo transforma o diret√≥rio em um pacote Python, permitindo importa√ß√µes estruturadas.
Pode ser vazio ou conter inicializa√ß√µes de subm√≥dulos, aliases ou registros.
Alternativamente, pode conter c√≥digo como: from .operacoes import Calculadora

üîπ USO DE DOCSTRINGS

S√£o cadeias de caracteres usadas para documentar classes, fun√ß√µes e m√©todos diretamente no c√≥digo.

Vantagens:

    Facilitam a compreens√£o por outros desenvolvedores.
    Podem ser lidas por ferramentas autom√°ticas de gera√ß√£o de documenta√ß√£o.
    S√£o exibidas automaticamente no autocompletar de editores como VSCode.
