===============================================================
Projeto: CALCULADORA_SIMPLES
===============================================================

游댳 OBJETIVO
Desenvolver uma calculadora aritm칠tica modular e orientada a objetos (OO), com foco did치tico, demonstrando:
- A import칙ncia de boas pr치ticas de Engenharia de Software.
- O uso da orquestra칞칚o com Prefect para automa칞칚o de deploys e versionamento.
- A escalabilidade de solu칞칫es bem projetadas.

游댳 FUNCIONALIDADES DA VERS츾O INICIAL
- Opera칞칚o de adi칞칚o
- Opera칞칚o de subtra칞칚o

As funcionalidades ser칚o incrementadas gradualmente nas pr칩ximas vers칫es:
- Multiplica칞칚o
- Divis칚o
- Porcentagem

游댳 JUSTIFICATIVA
Este projeto ser치 utilizado como base did치tica para demonstrar:
- Como estruturar um projeto profissional de software desde o in칤cio.
- A import칙ncia da modulariza칞칚o e da documenta칞칚o adequada.
- Como utilizar um orquestrador para realizar deploys autom치ticos e controlados.
- A evolu칞칚o de um sistema em ciclos incrementais com controle de vers칚o (Git + GitHub Actions + Prefect).

游댳 PREMISSAS DO PROJETO
- Todo o c칩digo ser치 escrito em Python 3.12.5.
- O ambiente de desenvolvimento ser치 gerenciado por um ambiente virtual chamado `DEV`.
- O reposit칩rio principal ser치 versionado no GitHub: `CALCULADORA_SIMPLES`.
- O Prefect Cloud ser치 utilizado para monitoramento e execu칞칚o dos fluxos automatizados.

游댳 ORGANIZA칂츾O MODULAR
- Cada opera칞칚o ser치 implementada em m칩dulos separados dentro do diret칩rio `modules/`.
- Os testes estar칚o no diret칩rio `tests/`.
- A orquestra칞칚o com o Prefect ser치 organizada em `flows/`.
- Arquivos de infraestrutura e integra칞칚o cont칤nua estar칚o em `infra/`.

游댳 PADR칏ES E BOAS PR츼TICAS
- Estrutura baseada em separa칞칚o de responsabilidades (SRP - Single Responsibility Principle).
- Nomea칞칚o clara e sem칙ntica dos arquivos e fun칞칫es.
- Uso de `README.md` para apresenta칞칚o do reposit칩rio e `readme.txt` para documenta칞칚o funcional.
- Uso de versionamento sem칙ntico nas tags e documenta칞칚o de altera칞칫es.

游댳 FORMA DE USO ESPERADA (vers칚o inicial)
- O sistema ser치 executado por linha de comando.
- O fluxo `hello_world` do Prefect ser치 usado para testar a orquestra칞칚o.
- Comandos de execu칞칚o e testes ser칚o documentados na pr칩xima etapa (ETAPA 1).

游댳 CONTROLE DE VERS츾O E DEPLOY
- A cada nova funcionalidade adicionada, ser치 realizado:
  - Novo commit.
  - Novo push.
  - Novo deploy autom치tico via GitHub Actions e Prefect Cloud.
- O pipeline de CI/CD ser치 mantido em `infra/`.

