# modules/operacoes.py
"""
M√≥dulo de opera√ß√µes b√°sicas da calculadora.
Este m√≥dulo cont√©m a classe Operacoes, que implementa m√©todos para realizar
adi√ß√£o e subtra√ß√£o de n√∫meros.
Vers√£o 1: Apenas adi√ß√£o e subtra√ß√£o.
    ||> Por que criar uma classe Operacoes? Para permitir escalabilidade e reutiliza√ß√£o. Futuras funcionalidades (multiplica√ß√£o, divis√£o, porcentagem) ser√£o adicionadas como novos m√©todos, respeitando o princ√≠pio aberto-fechado (OCP) da Engenharia de Software.
    ||> Por que usar float? Para garantir flexibilidade com n√∫meros decimais, pois opera√ß√µes podem envolver casas decimais.
    ||> Por que separar em modules/? Organiza√ß√£o modular favorece testes, manuten√ß√£o e integra√ß√£o com outros sistemas e orquestra√ß√£o.
    ||> Este m√≥dulo √© parte de um projeto maior de calculadora.
    ||> Por que usar docstrings? Para documentar o c√≥digo, facilitando a compreens√£o e manuten√ß√£o.
    ||> Por que usar type hints? Para melhorar a legibilidade e facilitar a detec√ß√£o de erros, indicando os tipos esperados para os par√¢metros e o retorno dos m√©todos. Onde usamos?
    Par√¢metros de m√©todos (a: float, b: float) => Tipo de retorno (-> float)
    ||> Por que usar __init__? Para inicializar o objeto Operacoes, mesmo que n√£o fa√ßa nada no momento. Permite a cria√ß√£o de inst√¢ncias da classe.

"""

# Note o uso de docstrings para documentar a classe e seus m√©todos.
# Isso √© uma boa pr√°tica de programa√ß√£o, pois facilita a compreens√£o do c√≥digo.
# Onde usamos: Na defini√ß√£o da classe("""docstring da classe""")
# Em cada m√©todo("""docstring do m√©todo""")

# modules/operacoes.py

"""
M√≥dulo com as classes Operacoes e Calculadora para a calculadora simples.
Vers√£o 1: Apenas adi√ß√£o e subtra√ß√£o.

üìå Motiva√ß√µes e boas pr√°ticas aplicadas:
- Modulariza√ß√£o em `modules/` para facilitar manuten√ß√£o e reuso
- Uso de type hints para melhorar legibilidade e facilitar debug
- Docstrings em todos os m√©todos e classes
- Classe `Calculadora` como fachada, promovendo escalabilidade
"""


class Operacoes:
    """
    Classe respons√°vel pelas opera√ß√µes b√°sicas da calculadora.
    """

    def somar(self, a: float, b: float) -> float:
        """
        Retorna a soma de dois n√∫meros.

        :param a: Primeiro n√∫mero
        :param b: Segundo n√∫mero
        :return: Resultado da soma
        """
        return a + b

    def subtrair(self, a: float, b: float) -> float:
        """
        Retorna a subtra√ß√£o entre dois n√∫meros.

        :param a: Primeiro n√∫mero
        :param b: Segundo n√∫mero
        :return: Resultado da subtra√ß√£o
        """
        return a - b

    def multiplicar(self, a: float, b: float) -> float:
        """
        Retorna a multiplica√ß√£o entre dois n√∫meros.
        :param a: Primeiro n√∫mero
        :param b: Segundo n√∫mero
        :return: Resultado da multiplica√ß√£o
        """
        return a * b

    def dividir(self, a: float, b: float) -> float:
        """
        Retorna a divis√£o entre dois n√∫meros.
        :param a: Primeiro n√∫mero
        :param b: Segundo n√∫mero
        :return: Resultado da divis√£o
        """
        if b == 0:
            raise ValueError("Divis√£o por zero n√£o √© permitida.")
        return a / b


class Calculadora:
    """
    Classe fachada que encapsula o uso da classe Operacoes.

    Permite crescimento modular da aplica√ß√£o com novas opera√ß√µes,
    respeitando o princ√≠pio aberto-fechado da Engenharia de Software.
    """

    def __init__(self):
        """
        Inicializa a calculadora com um objeto de opera√ß√µes.
        """
        self.operacoes = Operacoes()

    def somar(self, a: float, b: float) -> float:
        """
        Realiza a opera√ß√£o de soma usando a classe Operacoes.
        """
        return self.operacoes.somar(a, b)

    def subtrair(self, a: float, b: float) -> float:
        """
        Realiza a opera√ß√£o de subtra√ß√£o usando a classe Operacoes.
        """
        return self.operacoes.subtrair(a, b)

    def multiplicar(self, a: float, b: float) -> float:
        """
        Realiza a opera√ß√£o de multiplica√ß√£o usando a classe Operacoes.
        """
        return self.operacoes.multiplicar(a, b)

    def dividir(self, a: float, b: float) -> float:
        """
        Realiza a opera√ß√£o de divis√£o usando a classe Operacoes.
        """
        return self.operacoes.dividir(a, b)
